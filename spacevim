" You can enable the existing layers in space-vim and
" exclude the partial plugins in a certain layer.
" Use exclude option if you don't want the full Layer

let g:spacevim_layers = [
      \ 'fzf',
      \ 'better-defaults',
      \ 'editing',
      \ 'markdown',
      \ 'tmux',
      \ 'airline',
      \ 'git',
      \ 'programming',
      \ 'python',
      \ 'scala',
      \ 'text-align',
      \ 'javascript',
      \ 'typescript',
      \ 'which-key',
      \ 'lsp',
      \ 'formatting',
      \ ]


let g:spacevim_excluded = [
      \ 'dominikduda/vim_current_word',
      \ 'tpope/vim-rsi',
      \ 'junegunn/rainbow_parentheses.vim',
      \ 'luochen1990/rainbow',
      \ 'matze/vim-move',
      \ 'pelodelfuego/vim-swoop',
      \ 'terryma/vim-multiple-cursors',
      \ ]

" Put your private plugins here.
function! UserInit()

    " Space has been set as the default leader key,
    " if you want to change it, uncomment and set it here.
    " let g:spacevim_leader = "<\Space>"
    " let g:spacevim_localleader = ','

    " Install private plugins
    Plug 'NLKNguyen/papercolor-theme'
    Plug 'reedes/vim-colors-pencil'
    Plug 'ryanoasis/vim-devicons'
    Plug 'kana/vim-textobj-user'
    Plug 'Julian/vim-textobj-variable-segment'
    Plug 'junegunn/vim-easy-align'

    Plug 'guns/xterm-color-table.vim'
    Plug 'rudism/deoplete-tsuquyomi'
    Plug 'fszymanski/deoplete-emoji', { 'do': ':UpdateRemotePlugins' }
    Plug 'alvan/vim-closetag'

    Plug 'neoclide/coc.nvim', { 'branch': 'release' } " { 'do': { -> coc#util#install() } }

    if has('macunix')
      Plug 'rizzatti/dash.vim'
    endif

endfunction

" Put your costom configurations here, e.g., change the colorscheme.
function! UserConfig()

    if has('termguicolors')
      set termguicolors
      if g:spacevim.tmux
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      endif
    endif

    Layer 'scala-extra'
    let g:spacevim_lsp_engine = 'coc'

    let g:scala_sort_across_groups=1

    " If you enable airline layer and have installed the powerline fonts, set it here.
    let g:airline_powerline_fonts=1
    let g:airline_theme = 'pencil'
    let g:airline#extensions#hunks#enabled = 0
    let g:airline#extensions#tabline#enabled = 1
    let g:airline_skip_empty_sections = 1
    let g:airline#extensions#tagbar#enabled = 0
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.notexists = 'â˜…'
    nnoremap <leader>ta :AirlineToggle<CR>
    let g:airline#extensions#coc#enabled = 1

    nnoremap <leader>ff :Files<CR>
    nnoremap <leader>f~ :Files ~<CR>

    let g:PaperColor_Theme_Options = {
          \  'theme': {
          \    'default.light': {
          \      'override': {
          \         'linenumber_bg': ['#dadada', '253']
          \      }
          \    }
          \  }
          \}
    set background=light
    colorscheme PaperColor

    highlight SignColumn ctermbg=253 guibg=#dadada
    highlight link SignifySignAdd             DiffAdd
    highlight link SignifySignChange          DiffChange
    highlight link SignifySignDelete          DiffDelete
    highlight link SignifySignChangeDelete    SignifySignChange
    highlight link SignifySignDeleteFirstLine SignifySignDelete

    set expandtab
    set tabstop=2
    set softtabstop=2

    set timeoutlen=500 ttimeoutlen=10
    set colorcolumn=120

    let g:pymode_options_max_line_length = 120
    let g:pymode_breakpoint_bind = "<leader>pb"
    let g:pymode_doc_bind = "<leader>pk"
    nnoremap <leader>wz <C-w>z
    autocmd FileType python setlocal textwidth=119

    let g:AutoPairsMultilineClose = 0

    " Allow mouse in all modes
    set mouse=a

    let $FZF_DEFAULT_COMMAND = 'rg -l ""'

    if !exists('g:fzf_colors')
      let g:fzf_colors = {
          \ 'fg':      ['fg', 'Comment'],
          \ 'bg':      ['bg', 'CursorLine', 'CursorColumn'],
          \ 'hl':      ['fg', 'Comment'],
          \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
          \ 'bg+':     ['bg', 'Normal'],
          \ 'hl+':     ['fg', 'Statement'],
          \ 'info':    ['fg', 'PreProc'],
          \ 'border':  ['fg', 'Ignore'],
          \ 'prompt':  ['fg', 'Conditional'],
          \ 'pointer': ['fg', 'Exception'],
          \ 'marker':  ['fg', 'Keyword'],
          \ 'spinner': ['fg', 'Label'],
          \ 'header':  ['fg', 'Comment']
          \ }
    endif

    nnoremap <Tab> :bn<CR>
    nnoremap <S-Tab> :bp<CR>

    " Close a buffer without closing the previous window
    nnoremap <leader>bx :bp<bar>sp<bar>bn<bar>bd<CR>

    let g:closetag_filenames = '*.html,*.xhtml,*.jsx,*.tsx'
    let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.tsx'

    " Jenkinsfile syntax
    autocmd BufNewFile,BufRead *.jenkins set syntax=Jenkinsfile

    let g:formatters_scala = ['scalafmt']
    let g:formatdef_scalafmt = "'ng scalafmt --stdin'"

    let g:formatters_javascript_jsx = ['prettier']
    let g:formatters_jsx = ['prettier']
    let g:formatdef_prettier = "'prettier --stdin --parser babel --config `find . -maxdepth 2 -name prettier.config.js `'"

    nmap <silent> <leader>da <Plug>DashSearch
    nmap <silent> <leader>dg <Plug>DashGlobalSearch

    let g:dash_map = {
      \ 'scala': 'java',
      \ }

    " let g:spacevim#map#leader#desc['c'] = { 'name': 'coc-nvim' }

    let g:coc_global_extensions = [
          \ 'coc-json',
          \ 'coc-metals',
          \ 'coc-highlight',
          \ 'coc-explorer'
          \ ]
    nnoremap <silent> <leader>ee :CocCommand explorer<CR>

endfunction
