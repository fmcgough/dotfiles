" You can enable the existing layers in space-vim and
" exclude the partial plugins in a certain layer.
" Use exclude option if you don't want the full Layer

let g:spacevim_layers = [
      \ 'fzf',
      \ 'unite',
      \ 'better-defaults',
      \ 'better-motion',
      \ 'editing',
      \ 'file-manager',
      \ 'markdown',
      \ 'tmux',
      \ 'airline',
      \ 'git',
      \ 'programming',
      \ 'python',
      \ 'scala',
      \ 'text-align',
      \ 'games',
      \ 'javascript',
      \ 'typescript',
      \ 'deoplete',
      \ 'which-key',
      \ ]

"let g:spacevim_excluded = ['dominikduda/vim_current_word']

" Layer 'better-defaults', { 'exclude': ['dominikduda/vim_current_word'] }

if has('nvim')
    Layer 'syntax-checking'
endif

" Put your private plugins here.
function! UserInit()

    " Space has been set as the default leader key,
    " if you want to change it, uncomment and set it here.
    " let g:spacevim_leader = "<\Space>"
    " let g:spacevim_localleader = ','

    " Install private plugins
    Plug 'NLKNguyen/papercolor-theme'
    Plug 'reedes/vim-colors-pencil'
    Plug 'ryanoasis/vim-devicons'
    Plug 'kana/vim-textobj-user'
    Plug 'Julian/vim-textobj-variable-segment'
    Plug 'junegunn/vim-easy-align'
    Plug 'ibab/vim-snakemake'

    Plug 'guns/xterm-color-table.vim'
    Plug 'rudism/deoplete-tsuquyomi'
    Plug 'fszymanski/deoplete-emoji', { 'do': ':UpdateRemotePlugins' }
    Plug 'alvan/vim-closetag'

endfunction

" Put your costom configurations here, e.g., change the colorscheme.
function! UserConfig()

    if has('termguicolors')
      set termguicolors
      if g:spacevim.tmux
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      endif
    endif

    Layer 'scala-extra'

    let g:scala_sort_across_groups=1

    let g:vim_current_word#enabled = 0
    let g:vim_current_word#highlight_current_word = 0

    " If you enable airline layer and have installed the powerline fonts, set it here.
    let g:airline_powerline_fonts=1
    let g:airline_theme = 'pencil'
    let g:airline#extensions#hunks#enabled = 0
    let g:airline#extensions#tabline#enabled = 1
    let g:airline_skip_empty_sections = 1
    let g:airline#extensions#tagbar#enabled = 0
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.notexists = 'â˜…'
    nnoremap <leader>ta :AirlineToggle<CR>

    nnoremap <leader>ff :Files<CR>
    nnoremap <leader>f~ :Files ~<CR>

    let g:PaperColor_Theme_Options = {
          \  'theme': {
          \    'default.light': {
          \      'override': {
          \         'linenumber_bg': ['#dadada', '253']
          \      }
          \    }
          \  }
          \}
    set background=light
    colorscheme PaperColor

    highlight SignColumn ctermbg=253 guibg=#dadada
    highlight link SignifySignAdd             DiffAdd
    highlight link SignifySignChange          DiffChange
    highlight link SignifySignDelete          DiffDelete
    highlight link SignifySignChangeDelete    SignifySignChange
    highlight link SignifySignDeleteFirstLine SignifySignDelete

    let g:deoplete#omni#input_patterns = get(g:, 'deoplete#omni#input_patterns', {})

    set expandtab
    set tabstop=2
    set softtabstop=2

    set timeoutlen=500 ttimeoutlen=10
    set colorcolumn=120

    let g:pymode_options_max_line_length = 120
    let g:pymode_breakpoint_bind = "<leader>pb"
    let g:pymode_doc_bind = "<leader>pk"
    nnoremap <leader>wz <C-w>z
    autocmd FileType python setlocal textwidth=119

    let g:rainbow_active = 0
    nnoremap <leader>tr :RainbowToggle<CR>
    let g:AutoPairsMultilineClose = 0

    let g:NERDDefaultAlign = 'left'
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'

    let $FZF_DEFAULT_COMMAND = 'rg -l ""'
    let g:fzf_colors.fg = ['fg', 'Comment']

    nnoremap <Tab> :bn<CR>

    au BufRead,BufNewFile *Snakefile* set filetype=snakemake

    " Close a buffer without closing the previous window
    nnoremap <leader>bx :bp<bar>sp<bar>bn<bar>bd<CR>

    let g:closetag_filenames = '*.html,*.xhtml,*.jsx,*.tsx'
    let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.tsx'

endfunction
